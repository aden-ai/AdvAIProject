import matplotlib.pyplot as plt
import numpy as np
import os

# Function to use with your generated data
def load_generated_data(output_dir="synthetic_data"):
    """
    Loads and visualizes the synthetic data that was saved.

    Args:
        output_dir: Directory where the synthetic data was saved
    """
    # Load the saved synthetic images
    synthetic_images = np.load(os.path.join(output_dir, "synthetic_images.npy"))

    print(f"Loaded {len(synthetic_images)} synthetic images")
    print(f"Image shape: {synthetic_images.shape}")

    # Visualize a subset of the images
    visualize_synthetic_data(synthetic_images)

    return synthetic_images

def visualize_synthetic_data(generated_images, grid_size=10):
    """
    Creates an organized visualization of synthetic MNIST digits generated by the GAN.

    This function takes the generated images and displays them in a grid layout,
    making it easy to assess the quality and diversity of the generated samples.

    Args:
        generated_images: Array of generated images (num_samples, 28, 28, 1)
        samples_to_show: Number of samples to display (should be a perfect square)
        grid_size: Size of the grid (e.g., 10 creates a 10x10 grid)
    """
    # Create a figure with good size and spacing
    plt.figure(figsize=(15, 15))
    plt.suptitle('Generated MNIST Digits', fontsize=16, y=0.95)

    # Calculate grid dimensions
    grid_width = grid_size
    grid_height = grid_size

    # Create the grid of images
    for i in range(min(grid_width * grid_height, len(generated_images))):
        plt.subplot(grid_width, grid_height, i + 1)

        # Display single image
        plt.imshow(generated_images[i, :, :, 0], cmap='gray')
        plt.axis('off')  # Hide axes for cleaner visualization

    # Adjust layout and display
    plt.tight_layout()
    plt.subplots_adjust(top=0.95)  # Make room for the title
    plt.show()

    # Print some statistics about the generated images
    print(f"Statistics of generated images:")
    print(f"Mean pixel value: {np.mean(generated_images):.2f}")
    print(f"Standard deviation: {np.std(generated_images):.2f}")
    print(f"Min pixel value: {np.min(generated_images)}")
    print(f"Max pixel value: {np.max(generated_images)}")

# Generate and visualize immediately
synthetic_images = load_generated_data("synthetic_data")
visualize_synthetic_data(synthetic_images)